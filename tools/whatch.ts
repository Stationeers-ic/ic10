import { spawn } from "node:child_process";
import { watch } from "node:fs";
import { dirname, join, relative } from "node:path";
import { Glob } from "bun";

console.log("üöÄ Whatching ...");

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const CONFIG: {
	watchPath: string;
	debounceDelay: number;
	scripts: {
		pattern: Glob;
		command: string;
	}[];
	ignoreFiles: Glob[];
} = {
	// –ü—É—Ç—å –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–µ
	watchPath: join(dirname(import.meta.dir), "src"),

	// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è debounce (–º—Å)
	debounceDelay: 600,

	// –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏)
	// –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ
	scripts: [
		{
			pattern: new Glob("Ic10/Instruction/**"),
			command: "bun run generate-intruction-index && bun run generate-vscode",
		},
		{
			pattern: new Glob("Defines/**"),
			command: "bun run generate-device",
		},
		{
			pattern: new Glob("Schemas/**"),
			command: "bun run generate-schema",
		},
		{
			pattern: new Glob("**"),
			command: "bun run generate-index",
		},
	],

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
	ignoreFiles: [new Glob("**/index.ts"), new Glob("Defines/data.ts"), new Glob("**/*.json")],
};
// === –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ===

console.log(`Watching ${CONFIG.watchPath} for changes...`);

// –î–ª—è debounce
let timeoutId: NodeJS.Timeout | null = null;
const changedFiles = new Set<string>();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª
function isIgnored(filepath: string): boolean {
	const relativePath = relative(`${CONFIG.watchPath}/`, filepath);
	return CONFIG.ignoreFiles.some((glob) => glob.match(relativePath));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —à–∞–±–ª–æ–Ω–æ–º
function matchesPattern(filepath: string, pattern: Glob): boolean {
	const relativePath = relative(`${CONFIG.watchPath}/`, filepath);
	console.warn(relativePath, pattern.match(relativePath));
	return pattern.match(relativePath);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
function getScriptsToRun(filepaths: string[]): Set<string> {
	const scriptsToRun = new Set<string>();

	for (const filepath of filepaths) {
		for (const { pattern, command } of CONFIG.scripts) {
			if (matchesPattern(filepath, pattern)) {
				scriptsToRun.add(command);
			}
		}
	}
	console.table(scriptsToRun);
	return scriptsToRun;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function runScript(command: string) {
	console.log(`\nüîÑ Running: ${command}`);

	// –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å && –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	const commands = command.split("&&").map((cmd) => cmd.trim());

	const runNextCommand = async (index: number) => {
		if (index >= commands.length) {
			console.log(`‚úÖ All commands completed`);
			return;
		}

		const [cmd, ...args] = commands[index].split(" ");
		console.log(`‚ñ∂Ô∏è Executing: ${cmd} ${args.join(" ")}`);

		const child = spawn(cmd, args, { stdio: "inherit", shell: true });

		child.on("close", (code) => {
			if (code === 0) {
				console.log(`‚úÖ Command completed: ${commands[index]}`);
				runNextCommand(index + 1);
			} else {
				console.log(`‚ùå Command failed with code ${code}: ${commands[index]}`);
			}
		});
	};

	runNextCommand(0);
}

const watcher = watch(CONFIG.watchPath, { recursive: true }, (event, filename) => {
	const filepath = join(CONFIG.watchPath, filename);

	if (!filename || isIgnored(filepath)) {
		return;
	}
	console.log(`Detected ${event} in ${filename}`);

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –Ω–∞–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
	changedFiles.add(filepath);

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
	if (timeoutId) {
		clearTimeout(timeoutId);
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
	timeoutId = setTimeout(() => {
		if (changedFiles.size > 0) {
			console.log(`\nüìÅ Processing ${changedFiles.size} changed files...`);

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
			const scriptsToRun = getScriptsToRun(Array.from(changedFiles));

			if (scriptsToRun.size > 0) {
				console.log(`üöÄ Will run ${scriptsToRun.size} script(s):`);
				scriptsToRun.forEach((script) => console.log(`  - ${script}`));

				// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
				scriptsToRun.forEach(runScript);
			} else {
				console.log(`‚ÑπÔ∏è No scripts to run for the changes`);
			}

			// –û—á–∏—â–∞–µ–º –Ω–∞–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
			changedFiles.clear();
		}
		timeoutId = null;
	}, CONFIG.debounceDelay);
});

process.on("SIGINT", () => {
	console.log("Closing watcher...");

	// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
	if (timeoutId) {
		clearTimeout(timeoutId);
	}

	watcher.close();
	process.exit(0);
});
