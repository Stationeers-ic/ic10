import fs from "node:fs";
import path from "node:path";
import { parse } from "@babel/parser";
import traverse from "@babel/traverse";
import * as t from "@babel/types";
import { glob } from "glob";

console.log("üöÄ Generating intstructions...");

const SOURCE_DIR = path.resolve(__dirname, "../src/Ic10/Instruction");
const INDEX_PATH = path.join(SOURCE_DIR, "index.ts");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞—Å—Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º
function isAbstractClass(classNode: t.ClassDeclaration): boolean {
	return classNode.abstract === true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
function generateInstructionName(className: string): string {
	// –£–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "Instruction" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	const withoutSuffix = className.replace(/Instruction$/, "");

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PascalCase –≤ snake_case (–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã)
	return withoutSuffix
		.replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2")
		.replace(/([a-z\d])([A-Z])/g, "$1_$2")
		.toLowerCase();
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç Instruction
function extendsInstruction(classNode: t.ClassDeclaration): boolean {
	if (!classNode.superClass) return false;

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	function checkSuperClass(superClass: t.Node): boolean {
		// –ü—Ä—è–º–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: class A extends Instruction
		if (t.isIdentifier(superClass)) {
			return superClass.name === "Instruction";
		}

		// –ß–µ—Ä–µ–∑ MemberExpression: class A extends Base.Instruction
		if (t.isMemberExpression(superClass)) {
			if (t.isIdentifier(superClass.property)) {
				return superClass.property.name === "Instruction";
			}
		}

		// –ß–µ—Ä–µ–∑ CallExpression: class A extends makeBinarySet(...)
		if (t.isCallExpression(superClass)) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã call expression –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Instruction
			return superClass.arguments.some((arg) => {
				if (t.isIdentifier(arg)) {
					return arg.name.includes("Instruction");
				}
				if (t.isMemberExpression(arg)) {
					return t.isIdentifier(arg.property) && arg.property.name.includes("Instruction");
				}
				return false;
			});
		}

		return false;
	}

	return checkSuperClass(classNode.superClass);
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
function shouldIncludeClass(className: string, filePath: string): boolean {
	// –ò—Å–∫–ª—é—á–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
	const abstractClassNames = [
		"Instruction",
		"AbstractInstruction",
		"BinaryInstruction",
		"BinaryBranchInstruction",
		"UnaryInstruction",
		"BranchInstruction",
	];

	if (abstractClassNames.includes(className)) {
		return false;
	}

	// –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å—ã, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ Instruction (–Ω–æ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ)
	return className.endsWith("Instruction") && !abstractClassNames.includes(className);
}

async function generateInstructionsIndex() {
	let files = await glob([`${SOURCE_DIR}/**/*.ts`, `!${INDEX_PATH}`]);

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	files = files.sort((a, b) => a.localeCompare(b));

	const imports: string[] = [];
	const instructionMap: Map<string, string> = new Map(); // instructionName -> className

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç Instruction
	for (const file of files) {
		const content = fs.readFileSync(file, "utf-8");

		try {
			const ast = parse(content, {
				sourceType: "module",
				plugins: ["typescript"],
			});

			const fileClasses: Array<{ name: string; node: t.ClassDeclaration; filePath: string }> = [];

			// –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤ —Ñ–∞–π–ª–µ
			traverse(ast, {
				ClassDeclaration(path) {
					const className = path.node.id?.name;
					if (className) {
						fileClasses.push({
							name: className,
							node: path.node,
							filePath: file,
						});
					}
				},
			});

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –≤ —Ñ–∞–π–ª–µ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
			fileClasses.sort((a, b) => a.name.localeCompare(b.name));

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç Instruction –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
			if (fileClasses.length > 0) {
				const relativePath = path.relative(SOURCE_DIR, file).replace(/\.ts$/, "").replace("\\", "/");
				// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ @/src/Ic10/Instruction/...
				const importPath = `@/Ic10/Instruction/${relativePath}`;

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
				const classNames = fileClasses
					.filter(({ name, node, filePath }) => {
						// –ò—Å–∫–ª—é—á–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
						if (isAbstractClass(node)) return false;

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
						if (extendsInstruction(node)) return true;

						// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏
						return shouldIncludeClass(name, filePath);
					})
					.map(({ name }) => name);

				if (classNames.length > 0) {
					// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏–º–ø–æ—Ä—Ç
					const sortedClassNames = classNames.sort((a, b) => a.localeCompare(b));
					imports.push(`import { ${sortedClassNames.join(", ")} } from "${importPath}";`);

					// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–∞—Ä—Ç—É
					sortedClassNames.forEach((className) => {
						const instructionName = generateInstructionName(className);
						instructionMap.set(instructionName, className);
					});
				}
			}
		} catch (error) {
			console.warn(`Failed to parse ${file}:`, error);
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	imports.sort((a, b) => a.localeCompare(b));
	const sortedInstructions = Array.from(instructionMap.entries()).sort(([a], [b]) => a.localeCompare(b));

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ)
	const instructionsObject = sortedInstructions.map(([key, className]) => `  ${key}: ${className},`).join("\n");

	const content = `// Auto-generated file - DO NOT EDIT MANUALLY
${imports.join("\n")}

export type InstructionName = keyof typeof instructions;

export function isInstructionName(name: string): name is InstructionName {
  return name in instructions;
}

export const instructions = {
${instructionsObject}
} as const;
`;

	fs.writeFileSync(INDEX_PATH, content);
	console.table(sortedInstructions);
	console.log(`Generated ${INDEX_PATH} with ${instructionMap.size} instructions`);
}

// –ó–∞–ø—É—Å–∫
generateInstructionsIndex().catch(console.error);
