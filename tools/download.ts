import fs from "node:fs";
import generate from "@babel/generator";
import * as t from "@babel/types";
import axios from "axios";
import cliProgress from "cli-progress";
import JSON5 from "json5";

console.log("üöÄ Generating download...");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ --missing –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
const missingMode = process.argv.includes("--missing");

export async function downloadWithProgress(url: string, varName: string) {
	const { headers } = await axios.head(url);
	const totalLength = parseInt(headers["content-length"], 10);

	const bar = new cliProgress.SingleBar(
		{
			format: `${varName} |{bar}| {percentage}% | {value}/{total} bytes`,
		},
		cliProgress.Presets.shades_classic,
	);

	bar.start(totalLength, 0);

	const response = await axios.get(url, { responseType: "stream" });

	let data = "";
	let receivedLength = 0;

	response.data.on("data", (chunk: Buffer) => {
		receivedLength += chunk.length;
		bar.update(receivedLength);
		data += chunk.toString();
	});

	await new Promise((resolve, reject) => {
		response.data.on("end", resolve);
		response.data.on("error", reject);
	});

	bar.stop();

	return data;
}

export function saveAsTsFile(json: any, outPath: string, varName: string, type = " as const") {
	const tsContent = `export const ${varName} = ${JSON.stringify(json, null, 2)}${type};\nexport default ${varName};`
		.replace(/"NaN"/g, "NaN")
		.replace(/"Infinity"/g, "Infinity")
		.replace(/"-Infinity"/g, "-Infinity");

	fs.writeFileSync(outPath, tsContent);
	console.log(`–§–∞–π–ª ${outPath} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
}

async function downloadConsts() {
	const outPath = "src/Defines/consts.ts";

	if (missingMode && fs.existsSync(outPath)) {
		console.log(`–§–∞–π–ª ${outPath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
		return;
	}

	const data = await downloadWithProgress("https://assets.ic10.dev/consts.json", "CONSTS");
	const json = JSON5.parse(data);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á–∞–º
	function sortObjectKeys(obj: any): any {
		if (typeof obj !== "object" || obj === null) return obj;

		if (Array.isArray(obj)) {
			return obj.map(sortObjectKeys);
		}

		const sorted: any = {};
		Object.keys(obj)
			.sort()
			.forEach((key) => {
				sorted[key] = sortObjectKeys(obj[key]);
			});
		return sorted;
	}

	// –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
	const grouped: any = {};

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JSON
	const sortedJson = sortObjectKeys(json);

	for (const key in sortedJson) {
		if (key.includes(".")) {
			const [namespace, prop] = key.split(".");
			if (!grouped[namespace]) {
				grouped[namespace] = {};
			}
			grouped[namespace][prop] = sortedJson[key];
		} else {
			grouped[key] = sortedJson[key];
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
	const sortedGrouped = sortObjectKeys(grouped);

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
	const tsContent =
		`export const CONSTS = ${JSON5.stringify(sortedJson, null, 2)} as const;\n` +
		`export const GROUPED_CONSTS = ${JSON5.stringify(sortedGrouped, null, 2)} as const;\n` +
		`export default CONSTS;`;

	fs.writeFileSync(
		outPath,
		tsContent
			.replace(/["']NaN["']/, "NaN")
			.replace(/["']Infinity["']/, "Infinity")
			.replace(/["']-Infinity["']/, "-Infinity"),
	);
	console.log(`–§–∞–π–ª ${outPath} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
}

async function downloadInstructions() {
	const outPath = "src/Defines/instructions.ts";

	if (missingMode && fs.existsSync(outPath)) {
		console.log(`–§–∞–π–ª ${outPath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
		return;
	}

	const data = await downloadWithProgress("https://assets.ic10.dev/languages/EN/instructions.json", "INSTRUCTIONS");
	const json = JSON5.parse(data);
	saveAsTsFile(json, outPath, "INSTRUCTIONS");
}

async function downloadReagents() {
	const outPath = "src/Defines/reagents.ts";

	if (missingMode && fs.existsSync(outPath)) {
		console.log(`–§–∞–π–ª ${outPath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
		return;
	}

	const data = await downloadWithProgress("https://assets.ic10.dev/languages/EN/reagents.json", "INSTRUCTIONS");
	const json = JSON5.parse(data).data;
	saveAsTsFile(json, outPath, "REAGENTS");
}

async function downloadDevices() {
	const dataPath = "src/Defines/devices.ts";

	if (missingMode && fs.existsSync(dataPath)) {
		console.log(`–§–∞–π–ª—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
		return;
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	const output = await downloadWithProgress("https://assets.ic10.dev/languages/EN/devices.json", "DEVICES");

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏
	const tagsOutput = await downloadWithProgress("https://assets.ic10.dev/tags.json", "TAGS");
	const responseData = JSON5.parse(output);
	const tagsData = JSON5.parse(tagsOutput);
	const items: Record<string, any> = {};
	responseData.data
		.filter((item: any) => item.logics.length > 0)
		.forEach((item: any) => {
			items[item.id] = item;
		});

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AST –¥–ª—è —Ñ–∞–π–ª–∞ TypeScript
	const ast = generateDevicesAST(items, responseData, tagsData);
	const { code } = generate(ast);

	fs.writeFileSync(dataPath, code);
	console.log(`–§–∞–π–ª ${dataPath} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
}

function generateDevicesAST(items: Record<string, any>, responseData: any, tagsData: any) {
	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–∞
	const declarations: t.Statement[] = [];

	// 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DEVICES —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
	const devicesVariable = t.variableDeclaration("const", [
		t.variableDeclarator(
			t.identifier("DEVICES"),
			t.tsAsExpression(t.valueToNode(items), t.tsTypeReference(t.identifier("DevicesType"))),
		),
	]);
	declarations.push(t.exportNamedDeclaration(devicesVariable));

	// 2. –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	const defaultExport = t.exportDefaultDeclaration(t.identifier("DEVICES"));
	declarations.push(defaultExport);

	// 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ responseData
	declarations.push(...generateTypesFromResponseData(responseData, tagsData));

	return t.program(declarations);
}

function generateTypesFromResponseData(responseData: any, tagsData: any): t.Statement[] {
	const statements: t.Statement[] = [];
	const devices = responseData.data;

	// –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è connections –∏ mods
	const { uniqueConnections, uniqueMods } = collectUniqueValues(devices);

	// 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ DeviceType
	statements.push(...generateDevicePropertyTypes(devices, tagsData, uniqueConnections, uniqueMods));

	// 2. DeviceType interface
	const deviceInterface = generateDeviceInterface(devices, tagsData);
	statements.push(deviceInterface);

	// 3. DevicesType - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞
	const devicesType = t.exportNamedDeclaration(
		t.tsTypeAliasDeclaration(
			t.identifier("DevicesType"),
			null,
			t.tsTypeReference(
				t.identifier("Record"),
				t.tsTypeParameterInstantiation([t.tsNumberKeyword(), t.tsTypeReference(t.identifier("DeviceType"))]),
			),
		),
	);
	statements.push(devicesType);

	return statements;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π connections –∏ mods
function collectUniqueValues(devices: any[]): { uniqueConnections: string[]; uniqueMods: string[] } {
	const connectionsSet = new Set<string>();
	const modsSet = new Set<string>();

	devices.forEach((device) => {
		// –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ connections
		if (device.connections && Array.isArray(device.connections)) {
			device.connections.forEach((connection: string) => {
				if (connection && typeof connection === "string") {
					connectionsSet.add(connection);
				}
			});
		}

		// –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ mods
		if (device.mods && Array.isArray(device.mods)) {
			device.mods.forEach((mod: string) => {
				if (mod && typeof mod === "string") {
					modsSet.add(mod);
				}
			});
		}
	});

	return {
		uniqueConnections: Array.from(connectionsSet).sort(),
		uniqueMods: Array.from(modsSet).sort(),
	};
}

function generateDevicePropertyTypes(
	devices: any[],
	tagsData: any,
	uniqueConnections: string[],
	uniqueMods: string[],
): t.Statement[] {
	const statements: t.Statement[] = [];
	const propertySamples: Record<string, any> = {};

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	devices.forEach((device) => {
		if (device && typeof device === "object") {
			Object.keys(device).forEach((key) => {
				if (!propertySamples[key] && !isEmpty(device[key])) {
					propertySamples[key] = device[key];
				}
			});
		}
	});

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ export type –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
	Object.entries(propertySamples).forEach(([key, sampleValue]) => {
		const typeName = `${key.charAt(0).toUpperCase() + key.slice(1)}Type`;

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è tags
		if (key === "tags" && Array.isArray(tagsData)) {
			const typeAnnotation = generateTagsType(tagsData);
			statements.push(t.exportNamedDeclaration(t.tsTypeAliasDeclaration(t.identifier(typeName), null, typeAnnotation)));
		}
		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è connections
		else if (key === "connections" && uniqueConnections.length > 0) {
			const typeAnnotation = generateUnionArrayType(uniqueConnections);
			statements.push(t.exportNamedDeclaration(t.tsTypeAliasDeclaration(t.identifier(typeName), null, typeAnnotation)));
		}
		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è mods
		else if (key === "mods" && uniqueMods.length > 0) {
			const typeAnnotation = generateUnionArrayType(uniqueMods);
			statements.push(t.exportNamedDeclaration(t.tsTypeAliasDeclaration(t.identifier(typeName), null, typeAnnotation)));
		} else {
			const typeAnnotation = getTypeAnnotationForValue(sampleValue, true);
			statements.push(t.exportNamedDeclaration(t.tsTypeAliasDeclaration(t.identifier(typeName), null, typeAnnotation)));
		}
	});

	return statements;
}

function generateDeviceInterface(devices: any[], tagsData: any): t.Statement {
	const properties: t.TSPropertySignature[] = [];
	const propertySamples: Record<string, any> = {};

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	devices.forEach((device) => {
		if (device && typeof device === "object") {
			Object.keys(device).forEach((key) => {
				if (!propertySamples[key] && !isEmpty(device[key])) {
					propertySamples[key] = device[key];
				}
			});
		}
	});

	// –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
	Object.keys(propertySamples).forEach((key) => {
		const typeName = `${key.charAt(0).toUpperCase() + key.slice(1)}Type`;

		properties.push(
			t.tsPropertySignature(t.identifier(key), t.tsTypeAnnotation(t.tsTypeReference(t.identifier(typeName)))),
		);
	});

	return t.exportNamedDeclaration(
		t.tsInterfaceDeclaration(t.identifier("DeviceType"), null, null, t.tsInterfaceBody(properties)),
	);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ union —Ç–∏–ø–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫
function generateUnionArrayType(values: string[]): t.TSType {
	const literalTypes = values.map((value) => t.tsLiteralType(t.stringLiteral(value)));
	const unionType = t.tsUnionType(literalTypes);
	return t.tsArrayType(unionType);
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–∞ —Ç–µ–≥–æ–≤
function generateTagsType(tagsData: string[]): t.TSType {
	// –°–æ–∑–¥–∞–µ–º union type –∏–∑ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–≥–æ–≤
	const literalTypes = tagsData.map((tag) => t.tsLiteralType(t.stringLiteral(tag)));

	const unionType = t.tsUnionType(literalTypes);

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —ç—Ç–æ–≥–æ union type
	return t.tsArrayType(unionType);
}

function isEmpty(value: any): boolean {
	if (value === null || value === undefined) return true;
	if (typeof value === "string") return value.trim() === "";
	if (Array.isArray(value)) return value.length === 0;
	if (typeof value === "object") return Object.keys(value).length === 0;
	return false;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
function getTypeAnnotationForValue(value: any, allowNull: boolean = false): t.TSType {
	const baseType = getBaseTypeAnnotation(value, 0);

	if (allowNull) {
		return t.tsUnionType([baseType, t.tsNullKeyword()]);
	}
	return baseType;
}

function getBaseTypeAnnotation(value: any, depth: number = 0): t.TSType {
	if (value === null) {
		return t.tsNullKeyword();
	}

	if (Array.isArray(value)) {
		if (value.length === 0) {
			return t.tsArrayType(t.tsAnyKeyword());
		}

		// –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
		const elementTypes = new Set<string>();
		let elementSample: any = null;

		value.forEach((item) => {
			if (item != null) {
				const type = getBaseTypeAnnotation(item, depth);
				const typeKey = generateTypeKey(type);
				elementTypes.add(typeKey);
				if (!elementSample) elementSample = type;
			}
		});

		if (elementTypes.size === 0) {
			return t.tsArrayType(t.tsAnyKeyword());
		}

		// –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		if (elementTypes.size === 1) {
			return t.tsArrayType(elementSample);
		}

		// –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–∏–ø–æ–≤ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –Ω–æ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
		const uniqueTypes = Array.from(elementTypes)
			.map((key) => parseTypeKey(key, depth))
			.reduce((acc, type) => {
				// –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–π —Ç–∏–ø–æ–≤
				const typeKey = generateTypeKey(type);
				if (!acc.some((existing) => generateTypeKey(existing) === typeKey)) {
					acc.push(type);
				}
				return acc;
			}, [] as t.TSType[]);

		return t.tsArrayType(uniqueTypes.length === 1 ? uniqueTypes[0] : t.tsUnionType(uniqueTypes));
	}

	if (typeof value === "string") {
		return t.tsStringKeyword();
	} else if (typeof value === "number") {
		return t.tsNumberKeyword();
	} else if (typeof value === "boolean") {
		return t.tsBooleanKeyword();
	} else if (typeof value === "object") {
		// –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º any
		if (depth >= 3) {
			return t.tsAnyKeyword();
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
		const properties: t.TSPropertySignature[] = [];
		const allKeys = new Set<string>();
		const keySamples: Record<string, any> = {};

		// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
		if (Array.isArray(value)) {
			value.forEach((item) => {
				if (item && typeof item === "object") {
					Object.keys(item).forEach((key) => {
						allKeys.add(key);
						if (!keySamples[key] && item[key] != null) {
							keySamples[key] = item[key];
						}
					});
				}
			});
		} else {
			Object.keys(value).forEach((key) => {
				allKeys.add(key);
				if (!keySamples[key] && value[key] != null) {
					keySamples[key] = value[key];
				}
			});
		}

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
		allKeys.forEach((key) => {
			const sampleValue = keySamples[key];
			if (sampleValue != null) {
				const typeAnnotation = getBaseTypeAnnotation(sampleValue, depth + 1);

				const property = t.tsPropertySignature(t.identifier(key), t.tsTypeAnnotation(typeAnnotation));
				properties.push(property);
			}
		});

		return t.tsTypeLiteral(properties);
	}

	return t.tsAnyKeyword();
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–∏–ø–∞ (–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
function generateTypeKey(type: t.TSType): string {
	switch (type.type) {
		case "TSStringKeyword":
			return "string";
		case "TSNumberKeyword":
			return "number";
		case "TSBooleanKeyword":
			return "boolean";
		case "TSNullKeyword":
			return "null";
		case "TSUndefinedKeyword":
			return "undefined";
		case "TSAnyKeyword":
			return "any";
		case "TSArrayType":
			return `array<${generateTypeKey(type.elementType)}>`;
		case "TSUnionType": {
			const unionKeys = type.types.map((t) => generateTypeKey(t)).sort();
			return `union<${unionKeys.join("|")}>`;
		}
		case "TSTypeLiteral": {
			const propKeys = type.members
				.filter((m): m is t.TSPropertySignature => m.type === "TSPropertySignature")
				.map((m) => `${String(m.key)}:${generateTypeKey(m.typeAnnotation!.typeAnnotation)}`)
				.sort();
			return `object<{${propKeys.join(",")}}>`;
		}
		default:
			return "unknown";
	}
}

// –ü–∞—Ä—Å–∏—Ç –∫–ª—é—á –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–∏–ø (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function parseTypeKey(key: string, depth: number): t.TSType {
	if (key === "string") return t.tsStringKeyword();
	if (key === "number") return t.tsNumberKeyword();
	if (key === "boolean") return t.tsBooleanKeyword();
	if (key === "null") return t.tsNullKeyword();
	if (key === "undefined") return t.tsUndefinedKeyword();
	if (key === "any") return t.tsAnyKeyword();

	if (key.startsWith("array<")) {
		const innerKey = key.slice(6, -1);
		return t.tsArrayType(parseTypeKey(innerKey, depth));
	}

	if (key.startsWith("union<")) {
		const innerKeys = key.slice(6, -1).split("|");
		const types = innerKeys.map((k) => parseTypeKey(k, depth));
		return types.length === 1 ? types[0] : t.tsUnionType(types);
	}

	if (key.startsWith("object<")) {
		// –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø
		return t.tsAnyKeyword();
	}

	return t.tsAnyKeyword();
}

await downloadConsts();
await downloadInstructions();
await downloadDevices();
await downloadReagents();
