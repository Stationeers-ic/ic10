import { describe, test } from "bun:test";
import INSTRUCTIONS from "@/Defines/instructions";
import { instructions } from "@/Ic10/Instruction";

describe.only("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", () => {
	test.todo("–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", () => {
		const implemented = Object.keys(instructions);
		const required = Object.keys(INSTRUCTIONS).filter((i) => i !== "label");

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
		const table = required
			.map((key) => ({
				instruction: key,
				status: implemented.includes(key) ? "‚úÖ" : "‚ùå",
			}))
			.sort((a, b) => a.status.localeCompare(b.status));

		// –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
		console.table(table);

		// –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
		console.log("\n–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:");
		required
			.filter((key) => !implemented.includes(key))
			.forEach((key) => {
				console.log(`\n${key}:`);
				console.log(`  ${INSTRUCTIONS[key].description}  ${INSTRUCTIONS[key].example}`);
			});

		// –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
		const percent = ((implemented.length / required.length) * 100).toFixed(2);

		// –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å —ç–º–æ–¥–∑–∏
		if (percent === "100.00") {
			console.log(`üéâ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ 100% –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (${implemented.length} –∏–∑ ${required.length})`);
		} else {
			console.log(`‚ö†Ô∏è –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${percent}% –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (${implemented.length} –∏–∑ ${required.length})`);
		}

		// –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ 100%
	});
});
