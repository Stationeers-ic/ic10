import { describe, expect, test } from "bun:test";
import INSTRUCTIONS from "@/Defines/instructions";
import { instructions } from "@/Ic10/Instruction";

describe.only("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", () => {
	test("–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", () => {
		const implemented = Object.keys(instructions);
		const required = Object.keys(INSTRUCTIONS).filter((i) => i !== "label");

		// –ù–∞—Ö–æ–¥–∏–º –ª–∏—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º—ã–µ)
		const extraInstructions = implemented.filter((i) => !required.includes(i));

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
		const requiredTable = required.map((key) => ({
			instruction: key,
			status: implemented.includes(key) ? "‚úÖ" : "‚ùå",
			type: "required",
		}));

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–∏—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
		const extraTable = extraInstructions.map((key) => ({
			instruction: key,
			status: "üü°",
			type: "extra",
		}));

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
		const table = [...requiredTable, ...extraTable].sort((a, b) => {
			// –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É, –∑–∞—Ç–µ–º –ø–æ —Ç–∏–ø—É
			if (a.status !== b.status) {
				return a.status.localeCompare(b.status);
			}
			return a.type.localeCompare(b.type);
		});

		// –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
		console.table(table);

		// –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
		const notImplemented = required.filter((key) => !implemented.includes(key));
		if (notImplemented.length > 0) {
			console.log("\n–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:");
			notImplemented.forEach((key) => {
				console.log(`\n${key}:`);
				console.log(`  ${INSTRUCTIONS[key].description}  ${INSTRUCTIONS[key].example}`);
			});
		}

		// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö
		if (extraInstructions.length > 0) {
			console.log("\n–õ–∏—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è):");
			extraInstructions.forEach((key) => {
				console.log(`  ${key}`);
			});
		}

		// –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±—É–µ–º—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)
		const percent = (implemented.filter((i) => required.includes(i)).length / required.length) * 100;

		// –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		console.log(`\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
		console.log(`  - –¢—Ä–µ–±—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${required.length}`);
		console.log(`  - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É–µ–º—ã–µ: ${implemented.filter((i) => required.includes(i)).length}`);
		console.log(`  - –õ–∏—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${extraInstructions.length}`);
		console.log(`  - –í—Å–µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ${implemented.length}`);

		// –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å —ç–º–æ–¥–∑–∏
		if (percent >= 100) {
			console.log(
				`\nüéâ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ 100% —Ç—Ä–µ–±—É–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (${implemented.filter((i) => required.includes(i)).length} –∏–∑ ${required.length})`,
			);
		} else {
			console.log(
				`\n‚ö†Ô∏è –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${percent.toFixed(2)}% —Ç—Ä–µ–±—É–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (${implemented.filter((i) => required.includes(i)).length} –∏–∑ ${required.length})`,
			);
		}

		if (extraInstructions.length > 0) {
			console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${extraInstructions.length}`);
		}

		expect(percent).toBeGreaterThanOrEqual(100);
	});
});
