import { describe, expect, test } from "bun:test";
import * as process from "node:process";
import { createRunner, expectExpectation, type InstructionLike, runInstructionTest } from "@tests/helpers";
import { Random } from "exact-ic10-math";
import { Ic10Error } from "@/Ic10/Errors/Errors";
import { instructions } from "@/Ic10/Instruction";
import type { InstructionTestData } from "@/Ic10/Instruction/Helpers/Instruction";

describe("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", () => {
	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	const testCases: [string, InstructionLike, InstructionTestData][] = [];

	Object.entries(instructions).forEach(([key, instruction]) => {
		if (!instruction) return;

		const instr = instruction as InstructionLike;
		const tests = instr.tests?.();
		if (!tests || tests.length === 0) return;

		tests.forEach((testData, index) => {
			testCases.push([`${key} ${testData?.title ?? `#${index}`}`, instr, testData]);
		});
	});

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	for (const [testName, _instruction, testData] of testCases) {
		test(testName, async () => {
			Random.resetGlobalRandom(0);
			// console.time(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
			// –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–ª–∏–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞ 18 ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
			const runner = createRunner(testData.code, { register_length: 18 });
			try {
				await runInstructionTest(runner, testData);
			} catch (e) {
				if (e instanceof Ic10Error) {
					console.error(e.message);
				} else {
					console.error(e);
				}
				process.exit();
			}
			// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
			for (const exp of testData.expected) {
				expectExpectation(runner, exp, expect);
			}
			// console.timeEnd(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
		});
	}
});
