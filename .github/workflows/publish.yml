name: CI and Release

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: tests/reports/
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(bun -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists
        id: check_version
        run: |
          VERSION=${{ steps.version.outputs.current_version }}
          # Check if tag exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version v$VERSION already exists"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Version v$VERSION does not exist"
          fi

      - name: Bump version if exists
        if: steps.check_version.outputs.version_exists == 'true'
        run: |
          # Bump patch version
          bun pm version patch --no-git-tag-version
          NEW_VERSION=$(bun -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version bump
        if: steps.check_version.outputs.version_exists == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git add package.json
          git commit -m "chore: bump version to ${{ env.new_version }}"
          git push
          echo "Pushed version bump to main"

      - name: Build package
        run: bun run build

      - name: Publish to npm
        uses: JS-DevTools/npm-publish@v4
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_version.outputs.version_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.current_version }}
          name: Release v${{ steps.version.outputs.current_version }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
